package hello;

import java.util.concurrent.CountDownLatch;

import org.json.JSONException;
import org.json.JSONObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;

import hello.user.domain.User;
import hello.user.domain.UserRepository;
import hello.user.service.WSPusher;

/**
 * Here this Redis Receiver runs along with the Spring boot server. Essentially
 * this can be done on a different VM any where else
 * 
 * @author anand_gangadharan
 *
 */
public class RedisJobReceiverAndProcessor {
	private static final Logger LOGGER = LoggerFactory.getLogger(RedisJobReceiverAndProcessor.class);

	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;

	private CountDownLatch latch;

	@Autowired
	public RedisJobReceiverAndProcessor(CountDownLatch latch) {
		this.latch = latch;
	}

	public void receiveMessage(String message) {
		LOGGER.info("Received <" + message + ">");
		try {
			JSONObject job = new JSONObject(message);
			latch.countDown();
			addNewUser(job.getString("name"), job.getString("email"));
		} catch (JSONException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

	@Autowired
	private WSPusher pusher;

	/**
	 * Save it to database.
	 * 
	 * @param name
	 * @param email
	 * @return
	 */
	public String addNewUser(String name, String email) {
		User n = new User();
		n.setName(name);
		n.setEmail(email);
		System.out.println("User repo size before " + userRepository.count());
		userRepository.save(n);
		System.out.println("User repo size after " + userRepository.count());
		pusher.websocketNotify(userRepository.findAll());
		return "Saved";
	}
}